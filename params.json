{"name":"Node-jmx","tagline":"node.js library to connect with java applications through JMX.","body":"# node-jmx\r\n\r\nnode.js bridge library to communicate with java applications through JMX.\r\n\r\n[![NPM version](https://badge.fury.io/js/jmx.svg)](http://badge.fury.io/js/jmx)\r\n[![Code Climate](http://img.shields.io/codeclimate/github/onddo/node-jmx.svg)](https://codeclimate.com/github/onddo/node-jmx)\r\n[![Build Status](http://img.shields.io/travis/zuazo/node-jmx/0.4.1.svg)](https://travis-ci.org/zuazo/node-jmx)\r\n[![Coverage Status](http://img.shields.io/coveralls/onddo/node-jmx.svg)](https://coveralls.io/r/onddo/node-jmx?branch=master)\r\n\r\n## Requirements\r\n\r\n* Tested with node `>= 0.10`.\r\n* Java version 6 or higher.\r\n* `node-java`: See [its installation instructions](https://github.com/joeferner/node-java/tree/v0.5.4#installation)\r\n\r\n## Installation\r\n\r\n```bash\r\n$ npm install jmx\r\n```\r\n\r\n## Usage examples\r\n\r\n```js\r\nvar jmx = require(\"jmx\");\r\n\r\nclient = jmx.createClient({\r\n  host: \"localhost\", // optional\r\n  port: 3000\r\n});\r\n\r\nclient.connect();\r\nclient.on(\"connect\", function() {\r\n\r\n  client.getAttribute(\"java.lang:type=Memory\", \"HeapMemoryUsage\", function(data) {\r\n    var used = data.getSync('used');\r\n    console.log(\"HeapMemoryUsage used: \" + used.longValue);\r\n    // console.log(data.toString());\r\n  });\r\n\r\n  client.setAttribute(\"java.lang:type=Memory\", \"Verbose\", true, function() {\r\n    console.log(\"Memory verbose on\"); // callback is optional\r\n  });\r\n\r\n  client.invoke(\"java.lang:type=Memory\", \"gc\", [], function(data) {\r\n    console.log(\"gc() done\");\r\n  });\r\n\r\n});\r\n```\r\n\r\n```js\r\nclient = jmx.createClient({\r\n  service: \"service:jmx:rmi:///jndi/rmi://localhost:3000/jmxrmi\"\r\n});\r\n```\r\nYou can check the [node-java documentation](https://github.com/nearinfinity/node-java/blob/master/README.md#quick-examples) to learn how to work with java objects in node.js.\r\n\r\n## Documentation\r\n\r\n### jmx.createClient(options)\r\n\r\nReturns a `Client` object.\r\n\r\n#### options\r\n\r\n`options` is a hash table with the following values:\r\n\r\n* `service` - The full service URL string, with *host*, *port*, *protocol* and *urlPath* included. For example `\"service:jmx:rmi:///jndi/rmi://localhost:3000/jmxrmi\"`.\r\n* `host` - Hostname to connect to (defaults to `\"localhost\"`).\r\n* `port` - JMX port number to connect to.\r\n* `protocol` - Protocol to use (defaults to `\"rmi\"`).\r\n* `urlPath` - JMX URL Path (defaults to `\"/jndi/{protocol}://{host}:{port}/jmx{protocol}\"`).\r\n* `username` - JMX authentication username.\r\n* `password` - JMX authentication password.\r\n\r\n### Client.connect()\r\n\r\nConnects to the JMX server. Emits `connect` event when done.\r\n\r\n### Client.disconnect()\r\n\r\nDisconnects from the JMX server. Emits `disconnect` event when done.\r\n\r\n### Client.getAttribute(mbean, attribute, callback)\r\n\r\nReturns an attribute from a MBean.\r\n\r\n* `mbean` - MBean query address as string. For example \"java.lang:type=Memory\".\r\n* `attribute` - Attribute name as string.\r\n* `callback(attrValue)`\r\n\r\n### Client.getAttributes(mbean, attributes, callback)\r\n\r\nReturns an attribute list from a MBean.\r\n\r\n* `mbean` - MBean query address as string. For example \"java.lang:type=Memory\".\r\n* `attributes` - Attribute names as an array of strings.\r\n* `callback(attrValue)`\r\n\r\n### Client.getDefaultDomain(callback)\r\n\r\nReturns the default domain as string.\r\n\r\n* `callback(domainName)`\r\n\r\n### Client.getDomains(callback)\r\n\r\nReturns an array of domain names.\r\n\r\n* `callback(domainsArray)`\r\n\r\n### Client.getMBeanCount(callback)\r\n\r\nReturns total the number of MBeans.\r\n\r\n* `callback(mbeanCount)`\r\n\r\n### Client.invoke(mbean, methodName, params, [signature,] [callback])\r\n\r\nInvokes a MBean operation.\r\n\r\n* `mbean` - The MBean query address as string. For example `\"java.lang:type=Memory\"`.\r\n* `methodName` - The method name as string.\r\n* `params` - The parameters to pass to the operation as array. For example `[ 1, 5, \"param3\" ]`.\r\n* `signature` (optional) - An array with the signature of the *params*. Sometimes may be necessary to use this if class names are not correctly detected (gives a *NoSuchMethodException*). For example `[ \"int\", \"java.lang.Integer\", \"java.lang.String\" ]`.\r\n* `callback(returnedValue)`\r\n\r\n### Client.listMBeans(callback)\r\n\r\nLists server MBeans. Callback returns an array of strings containing MBean names.\r\n\r\n### Client.on(event, callback)\r\n\r\nAdds a listener for the especified event.\r\n\r\n#### events\r\n\r\n* `connect`\r\n* `disconnect`\r\n* `error` - Passes the error as first parameter to the callback function.\r\n\r\n### Client.setAttribute(mbean, attribute, value, [className,] [callback])\r\n\r\nChanges an attribute value of the MBean.\r\n\r\n* `mbean` - The MBean query address as string. For example `\"java.lang:type=Memory\"`.\r\n* `attribute` - The attribute name as string.\r\n* `value` - The attribute value.\r\n* `className` (optional) - The attribute java className. Sometimes may be necessary to use this if value type is not correctly detected (gives a *InvalidAttributeValueException*). For example `\"java.lang.Long\".\r\n* `callback()` (optional)\r\n\r\n## Error handling\r\n\r\nErrors are **not printed** to the console by default. You can catch them with something like the following:\r\n\r\n```js\r\nclient.on(\"error\", function(err) {\r\n  // ...\r\n});\r\n```\r\n\r\n## Testing\r\n\r\n```bash\r\n$ npm install -g jshint\r\n$ make style test\r\n```\r\n\r\nYou will need to set the `JAVA_HOME` environment variable if the java binary is not in your *PATH*.\r\n\r\n### Coverage\r\n\r\n```bash\r\n$ make test-cov\r\n```\r\n\r\nThe HTML output file will be at `./coverage.html`.\r\n\r\n## Debugging\r\n\r\nYou can enable debugging and error printing to console using `NODE_DEBUG` environment variable:\r\n\r\n```bash\r\n$ NODE_DEBUG=\"jmx\" node [...]\r\n```\r\n\r\n## History\r\n\r\n### 0.4.1\r\n\r\n* Fix badge links.\r\n\r\n### 0.4.0\r\n\r\n* Add #getAttributes method ([issue #7](https://github.com/onddo/node-jmx/pull/7), thanks [@ericbroda](https://github.com/ericbroda)).\r\n* Update dependencies: `async@~1.3.0`, `java@~0.5.0`.\r\n* Add node version `0.12` support.\r\n* Remove node version `0.8` support.\r\n\r\n### 0.3.1\r\n\r\n* Remove jshint dependency from *package.json*.\r\n\r\n### 0.3.0\r\n\r\n* package.json: udpate package dependencies (fixes [issue #3](https://github.com/onddo/node-jmx/issues/3)).\r\n* MBeanServerConnection:\r\n * Define *credentials* and *instancesAr* variables.\r\n * Some code improvements.\r\n* Allow premature disconnections (fixes [issue #2](https://github.com/onddo/node-jmx/issues/2)).\r\n* Fix all [JSHint](http://www.jshint.com/) errors and integrate in the Makefile.\r\n* README: Add [Code Climate](https://codeclimate.com/) badge.\r\n* Makefile: Use relative path for jscoverage.\r\n* Avoid using *should* in tests.\r\n\r\n### 0.2.1\r\n\r\n* Travis hostname errors fixed.\r\n* Removed node `0.6` support: not supported by the last `node-java` version.\r\n* Homepage changed to GitHub Pages.\r\n\r\n### 0.2.0\r\n\r\n* Added #listMBeans method.\r\n\r\n### 0.1.1\r\n\r\n* More tests added.\r\n* Travis and Coveralls integration.\r\n* JavaJmx#setAttribute className parameter bug fixed.\r\n* JavaJmx#invoke and javaJmx#setAttribute function parameters management improved.\r\n\r\n### 0.1.0\r\n\r\n* The first published version.\r\n\r\n\r\n## License and Author\r\n\r\n|                      |                                          |\r\n|:---------------------|:-----------------------------------------|\r\n| **Author:**          | [Xabier de Zuazo](https://github.com/zuazo) (<xabier@onddo.com>)\r\n| **Contributor:**     | [Eric](https://github.com/ericbroda)\r\n| **Copyright:**       | Copyright (c) 2013-2015 Onddo Labs, SL. (www.onddo.com)\r\n| **License:**         | Apache License, Version 2.0\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n","google":"UA-38093658-2","note":"Don't delete this file! It's used internally to help with page regeneration."}